name: Blue/Green Deploy to ECS using ECR

on:
  push:
    branches:
      - blue-green-strapi-cicd  # Trigger the workflow on this branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up AWS credentials
    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    # Step 3: Log in to Amazon ECR
    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    # Step 4: Build and push Docker image to ECR
    - name: Build and push Docker image to ECR
      run: |
        docker build -t 118273046134.dkr.ecr.us-east-1.amazonaws.com/strapi-app:${{ github.sha }} .
        docker push 118273046134.dkr.ecr.us-east-1.amazonaws.com/strapi-app:${{ github.sha }}

    # Step 5: Update ECS Task Definition (Dynamically Update with New Image)
    - name: Update ECS Task Definition
      run: |
        # Fetch the current ECS Task Definition
        task_def=$(aws ecs describe-task-definition --task-definition strapi-task-def)
        
        # Modify the task definition to update the Docker image tag
        new_task_def=$(echo "$task_def" | jq '.taskDefinition | .containerDefinitions[0].image = "118273046134.dkr.ecr.us-east-1.amazonaws.com/strapi-app:'${{ github.sha }}'"')
        
        # Register the new task definition
        echo "$new_task_def" > new-task-definition.json
        aws ecs register-task-definition --cli-input-json file://new-task-definition.json

    # Step 6: Update ECS Service to use the new task definition (Blue/Green Deployment Strategy)
    - name: Update ECS Service
      run: |
        aws ecs update-service \
          --cluster strapi-cluster \
          --service strapi-service \
          --task-definition strapi-task-def:${{ github.sha }} \
          --desired-count 2 \
          --force-new-deployment

    # Step 7: Trigger CodeDeploy for Blue/Green deployment (if necessary)
    - name: Deploy with CodeDeploy
      run: |
        aws deploy create-deployment \
          --application-name strapi-app-deployment \
          --deployment-group-name strapi-deployment-group \
          --revision revisionType=S3,s3Location={bucket="strapi-deployments-bucket",key="appspec.yaml",bundleType=YAML} \
          --description "Blue/Green Deployment for strapi-app"

